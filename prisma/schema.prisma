// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum SystemRole {
  ADMIN
  USER
}

enum Role {
  CHEF
  COOK
  JUNIORHELPER
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TicketType {
  ADULT
  CHILD
}

enum DinnerMode {
  TAKEAWAY
  DINEIN
  NONE
}

model AllergyType {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  icon        String?
  Allergy     Allergy[]
}

model Allergy {
  id            Int         @id @default(autoincrement())
  inhabitantId  Int
  inhabitant    Inhabitant  @relation(fields: [inhabitantId], references: [id])
  allergyTypeId Int
  allergyType   AllergyType @relation(fields: [allergyTypeId], references: [id])
}

// Represents the login and contact credentials of a Heynabo standalone user, together with system roles
model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  phone        String?
  passwordHash String
  systemRole   SystemRole @default(USER)
  Inhabitant   Inhabitant?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// Represents the dinner preferences of an inhabitant for a given weekday
model DinnerPreference {
  id           Int        @id @default(autoincrement())
  inhabitantId Int
  inhabitant   Inhabitant @relation(fields: [inhabitantId], references: [id])
  weekday      Weekday
  dinnerMode   DinnerMode
}

// Represents a member of a household, that can participate in the dinners and cooking
// Inhabitant 1-0..1 User
// Inhabitant *-1 Household
// Inhabitant - 0..* Allergy
// User - 0..* Role

model Inhabitant {
  id                    Int                     @id @default(autoincrement())
  heynaboId             Int                     @unique // reference to Heynabo user
  user                  User?                   @relation(fields: [userId], references: [id])
  userId                Int?                    @unique // foreign key to User
  householdId           Int
  household             Household               @relation(fields: [householdId], references: [id])
  pictureUrl            String?
  name                  String
  lastName              String
  birthDate             DateTime?
  allergies             Allergy[]
  dinnerPreferences     DinnerPreference[]
  DinnerEvent           DinnerEvent[]
  Order                 Order[]
  CookingTeamAssignment CookingTeamAssignment[]
}

model Household {
  id          Int          @id @default(autoincrement())
  heynaboId   Int          @unique
  pbsId       Int          @unique
  movedInDate DateTime
  moveOutDate DateTime?
  name        String
  address     String
  inhabitants Inhabitant[]
  Invoice     Invoice[]
}

model DinnerEvent {
  id              Int          @id @default(autoincrement())
  date            DateTime
  menuTitle       String
  menuDescription String?
  menuPictureUrl  String?
  dinnerMode      DinnerMode
  chefId          Int?
  chef            Inhabitant?  @relation(fields: [chefId], references: [id])
  cookingTeamId   Int?
  cookingTeam     CookingTeam? @relation(fields: [cookingTeamId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  tickets         Order[]
  Season          Season?      @relation(fields: [seasonId], references: [id])
  seasonId        Int?
}

model Order {
  id            Int          @id @default(autoincrement())
  dinnerEventId Int
  dinnerEvent   DinnerEvent  @relation(fields: [dinnerEventId], references: [id])
  inhabitantId  Int
  inhabitant    Inhabitant   @relation(fields: [inhabitantId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  ticketType    TicketType
  Transaction   Transaction?
}

model Transaction {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  order     Order    @relation(fields: [orderId], references: [id])
  amount    Int
  createdAt DateTime @default(now())
  invoiceId Int?     @unique
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
}

model Invoice {
  id           Int           @id @default(autoincrement())
  transactions Transaction[]
  cutoffDate   DateTime
  paymentDate  DateTime
  amount       Int
  createdAt    DateTime      @default(now())
  householdId  Int
  houseHold    Household     @relation(fields: [householdId], references: [id])
}

// Cooking teams are seasonal, and created by the system administrator
model CookingTeam {
  id            Int                     @id @default(autoincrement())
  seasonId      Int
  season        Season                  @relation(fields: [seasonId], references: [id])
  name          String
  dinners       DinnerEvent[]
  chefs         CookingTeamAssignment[] @relation("Chefs")
  cooks         CookingTeamAssignment[] @relation("Cooks")
  juniorHelpers CookingTeamAssignment[] @relation("JuniorHelpers")
}

model CookingTeamAssignment {
  id                     Int          @id @default(autoincrement())
  chefForcookingTeamId   Int?
  chefForCcookingTeam    CookingTeam? @relation("Chefs", fields: [chefForcookingTeamId], references: [id])
  cookForcookingTeamId   Int?
  cookForCcookingTeam    CookingTeam? @relation("Cooks", fields: [cookForcookingTeamId], references: [id])
  juniorForcookingTeamId Int?
  juniorForCcookingTeam  CookingTeam? @relation("JuniorHelpers", fields: [juniorForcookingTeamId], references: [id])
  inhabitantId           Int
  inhabitant             Inhabitant   @relation(fields: [inhabitantId], references: [id])
  role                   Role
}

model Season {
  id                                Int           @id @default(autoincrement())
  shortName                         String?
  startDate                         DateTime
  endDate                           DateTime
  isActive                          Boolean
  CookingTeams                      CookingTeam[]
  cookingDays                       String // json stringfied array of Weekday
  holidays                          String // json stringfied array of DateTime
  ticketPrices                      TicketPrice[]
  dinnerEvents                      DinnerEvent[]
  ticketIsCancellableDaysBefore     Int
  diningModeIsEditableMinutesBefore Int
}

model TicketPrice {
  id          Int        @id @default(autoincrement())
  seasonId    Int
  season      Season     @relation(fields: [seasonId], references: [id])
  ticketType  TicketType
  price       Int
  description String?
}
